{"version":3,"sources":["components/tempelates.jsx","components/Edit.jsx","App.js","index.js"],"names":["Tempelates","temp","setEditMeme","className","map","el","onClick","src","url","id","Edit","editMeme","useState","username","password","box","memeData","setMemeData","alt","Array","box_count","_","i","type","placeholder","onChange","ev","boxes","text","target","value","b","idx","fetch","then","response","json","data","generateMemeHandler","App","tempelates","setTempelates","useEffect","memes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uMAiBeA,MAjBf,YAA4C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC1B,OACE,qBAAKC,UAAU,YAAf,SACGF,EAAKG,KAAI,SAACC,GAAD,OACR,qBACEF,UAAU,YACVG,QAAS,WACPJ,EAAYG,IAHhB,SAME,qBAAiBE,IAAKF,EAAGG,KAAfH,EAAGI,Y,cCkCRC,EA3CF,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,SAAUT,EAAkB,EAAlBA,YAAkB,EACVU,mBAAS,CACvCH,GAAIE,EAASF,GACbI,SAAU,gBACVC,SAAU,aACVC,IAAK,KALmC,mBACnCC,EADmC,KACzBC,EADyB,KAkB1C,OACE,0BAASd,UAAU,gBAAnB,UACE,8BACE,qBAAKI,IAAKI,EAASH,IAAKU,IAAI,OAE9B,8BACG,YAAIC,MAAMR,EAASS,YAAYhB,KAAI,SAACiB,EAAGC,GAAJ,OAClC,uBACEC,KAAK,OACLC,YAAW,kBAAaF,EAAI,GAC5BG,SAAU,SAACC,GACT,IAAMC,EAAQX,EAASD,IACvBY,EAAML,GAAK,CAAEM,KAAMF,EAAGG,OAAOC,OAC7Bb,EAAY,2BAAKD,GAAN,IAAgBD,IAAKY,aAKxC,gCACE,wBAAQrB,QAAS,kBAAMJ,EAAY,OAAnC,gCACA,wBAAQI,QAAS,kBA/BK,WAC1B,IAAIE,EAAG,4DAAwDQ,EAASP,GAAjE,qBAAgFO,EAASH,SAAzF,qBAA8GG,EAASF,UAC9HE,EAASD,IAAIX,KAAI,SAAC2B,EAAGC,GACnBxB,GAAG,iBAAcwB,EAAd,mBAA4BD,EAAEH,SAEnCK,MAAMzB,GACH0B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnC,EAAY,2BAAKS,GAAN,IAAgBH,IAAK6B,EAAKA,KAAK7B,UAuBnB8B,IAAvB,oCChBOC,MAnBf,WAAgB,IAAD,EACqB3B,mBAAS,IAD9B,mBACR4B,EADQ,KACIC,EADJ,OAEiB7B,mBAAS,MAF1B,mBAERD,EAFQ,KAEET,EAFF,KAQb,OALAwC,qBAAU,WACRT,MAAM,qCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUI,EAAcJ,EAAKA,KAAKM,YACzC,IAED,qBAAKxC,UAAU,OAAf,SACgB,OAAbQ,EACC,cAAC,EAAD,CAAYV,KAAMuC,EAAYtC,YAAaA,IAE3C,cAAC,EAAD,CAAMS,SAAUA,EAAUT,YAAaA,OCb/C0C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c2c803e4.chunk.js","sourcesContent":["function Tempelates({ temp, setEditMeme }) {\n  return (\n    <div className=\"container\">\n      {temp.map((el) => (\n        <div\n          className=\"tempelate\"\n          onClick={() => {\n            setEditMeme(el);\n          }}\n        >\n          <img key={el.id} src={el.url}></img>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Tempelates;\n","import { useState } from \"react\";\nconst Edit = ({ editMeme, setEditMeme }) => {\n  const [memeData, setMemeData] = useState({\n    id: editMeme.id,\n    username: \"memeTester101\",\n    password: \"ksES6bd147\",\n    box: [],\n  });\n  const generateMemeHandler = () => {\n    let url = `https://api.imgflip.com/caption_image?template_id=${memeData.id}&username=${memeData.username}&password=${memeData.password}`;\n    memeData.box.map((b, idx) => {\n      url += `&boxes[${idx}][text]=${b.text}`;\n    });\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setEditMeme({ ...editMeme, url: data.data.url });\n      });\n  };\n  return (\n    <section className=\"editContainer\">\n      <div>\n        <img src={editMeme.url} alt=\"\"></img>\n      </div>\n      <div>\n        {[...Array(editMeme.box_count)].map((_, i) => (\n          <input\n            type=\"text\"\n            placeholder={`Caption ${i + 1}`}\n            onChange={(ev) => {\n              const boxes = memeData.box;\n              boxes[i] = { text: ev.target.value };\n              setMemeData({ ...memeData, box: boxes });\n            }}\n          ></input>\n        ))}\n      </div>\n      <div>\n        <button onClick={() => setEditMeme(null)}> Choose Tempelate </button>\n        <button onClick={() => generateMemeHandler()}> Generate Meme </button>\n      </div>\n    </section>\n  );\n};\nexport default Edit;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Tempelates from \"./components/tempelates\";\nimport Edit from \"./components/Edit\";\nfunction App() {\n  let [tempelates, setTempelates] = useState([]);\n  let [editMeme, setEditMeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((response) => response.json())\n      .then((data) => setTempelates(data.data.memes));\n  }, []);\n  return (\n    <div className=\"main\">\n      {editMeme === null ? (\n        <Tempelates temp={tempelates} setEditMeme={setEditMeme} />\n      ) : (\n        <Edit editMeme={editMeme} setEditMeme={setEditMeme} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}